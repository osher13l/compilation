
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 28 11:47:49 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 28 11:47:49 IST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\007\000\002\003\011\000\002\003\006" +
    "\000\002\003\010\000\002\004\003\000\002\004\004\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\025\003\000\002\025\005\000\002\006\004\000\002\006" +
    "\004\000\002\007\006\000\002\007\007\000\002\010\004" +
    "\000\002\010\005\000\002\011\004\000\002\011\006\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\024\003\000\002\024" +
    "\004\000\002\013\006\000\002\013\004\000\002\013\005" +
    "\000\002\013\004\000\002\013\007\000\002\013\011\000" +
    "\002\013\007\000\002\013\004\000\002\013\004\000\002" +
    "\013\005\000\002\013\004\000\002\013\007\000\002\013" +
    "\005\000\002\022\003\000\002\022\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\006\000" +
    "\002\014\007\000\002\014\005\000\002\014\005\000\002" +
    "\014\004\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\007\006\001\002\000\006\002\165\007" +
    "\006\001\002\000\006\002\001\007\001\001\002\000\004" +
    "\063\007\001\002\000\006\015\010\030\011\001\002\000" +
    "\004\063\157\001\002\000\020\005\015\023\012\046\023" +
    "\052\013\053\020\056\017\063\021\001\002\000\006\026" +
    "\uffeb\062\uffeb\001\002\000\014\005\015\023\012\053\020" +
    "\056\017\063\021\001\002\000\020\005\ufffa\023\ufffa\046" +
    "\ufffa\052\ufffa\053\ufffa\056\ufffa\063\ufffa\001\002\000\006" +
    "\026\uffea\062\uffea\001\002\000\020\005\ufff6\023\ufff6\046" +
    "\ufff6\052\ufff6\053\ufff6\056\ufff6\063\ufff6\001\002\000\004" +
    "\062\154\001\002\000\006\026\uffe9\062\uffe9\001\002\000" +
    "\006\026\uffe8\062\uffe8\001\002\000\020\005\015\023\012" +
    "\046\152\052\013\053\020\056\017\063\021\001\002\000" +
    "\006\002\ufffc\007\ufffc\001\002\000\006\026\027\062\026" +
    "\001\002\000\020\005\ufff2\023\ufff2\046\ufff2\052\ufff2\053" +
    "\ufff2\056\ufff2\063\ufff2\001\002\000\010\010\ufff5\027\035" +
    "\051\ufff5\001\002\000\004\045\034\001\002\000\006\010" +
    "\031\051\032\001\002\000\004\062\033\001\002\000\020" +
    "\005\ufff8\023\ufff8\046\ufff8\052\ufff8\053\ufff8\056\ufff8\063" +
    "\ufff8\001\002\000\006\010\ufff4\051\ufff4\001\002\000\006" +
    "\026\uffe7\062\uffe7\001\002\000\014\005\015\023\012\050" +
    "\037\053\020\063\021\001\002\000\006\026\027\062\150" +
    "\001\002\000\004\030\043\001\002\000\006\010\041\050" +
    "\042\001\002\000\012\005\015\023\012\053\020\063\021" +
    "\001\002\000\004\030\043\001\002\000\030\005\015\006" +
    "\057\011\055\022\051\023\012\030\046\046\052\047\056" +
    "\053\020\057\045\063\021\001\002\000\020\005\ufff0\023" +
    "\ufff0\046\ufff0\052\ufff0\053\ufff0\056\ufff0\063\ufff0\001\002" +
    "\000\004\027\141\001\002\000\030\005\015\006\057\011" +
    "\055\022\051\023\012\030\046\046\137\047\056\053\020" +
    "\057\045\063\021\001\002\000\030\005\uffe6\006\uffe6\011" +
    "\uffe6\022\uffe6\023\uffe6\030\uffe6\046\uffe6\047\uffe6\053\uffe6" +
    "\057\uffe6\063\uffe6\001\002\000\030\005\015\006\057\011" +
    "\055\022\051\023\012\030\046\046\135\047\056\053\020" +
    "\057\045\063\021\001\002\000\004\027\126\001\002\000" +
    "\020\005\uffef\023\uffef\046\uffef\052\uffef\053\uffef\056\uffef" +
    "\063\uffef\001\002\000\006\026\027\062\121\001\002\000" +
    "\004\004\116\001\002\000\004\051\115\001\002\000\016" +
    "\027\065\032\066\033\063\037\064\051\067\054\070\001" +
    "\002\000\004\051\062\001\002\000\004\051\061\001\002" +
    "\000\032\005\uffe3\006\uffe3\011\uffe3\016\uffe3\022\uffe3\023" +
    "\uffe3\030\uffe3\046\uffe3\047\uffe3\053\uffe3\057\uffe3\063\uffe3" +
    "\001\002\000\032\005\uffdd\006\uffdd\011\uffdd\016\uffdd\022" +
    "\uffdd\023\uffdd\030\uffdd\046\uffdd\047\uffdd\053\uffdd\057\uffdd" +
    "\063\uffdd\001\002\000\014\027\uffd6\032\uffd6\033\uffd6\037" +
    "\uffd6\054\uffd6\001\002\000\014\027\uffd7\032\uffd7\033\uffd7" +
    "\037\uffd7\054\uffd7\001\002\000\014\027\065\032\066\033" +
    "\063\037\064\054\070\001\002\000\012\005\015\023\012" +
    "\053\020\063\104\001\002\000\032\005\uffe1\006\uffe1\011" +
    "\uffe1\016\uffe1\022\uffe1\023\uffe1\030\uffe1\046\uffe1\047\uffe1" +
    "\053\uffe1\057\uffe1\063\uffe1\001\002\000\012\013\uffd3\045" +
    "\uffd3\050\uffd3\051\uffd3\001\002\000\012\013\uffcd\045\uffcd" +
    "\050\uffcd\051\uffcd\001\002\000\006\013\100\051\103\001" +
    "\002\000\012\013\uffd5\045\uffd5\050\uffd5\051\uffd5\001\002" +
    "\000\014\027\065\032\066\033\063\037\064\054\070\001" +
    "\002\000\012\013\uffd4\045\uffd4\050\uffd4\051\uffd4\001\002" +
    "\000\012\013\100\045\uffce\050\uffce\051\uffce\001\002\000" +
    "\014\027\065\032\066\033\063\037\064\054\070\001\002" +
    "\000\004\031\101\001\002\000\012\013\uffd0\045\uffd0\050" +
    "\uffd0\051\uffd0\001\002\000\012\013\100\045\uffcf\050\uffcf" +
    "\051\uffcf\001\002\000\032\005\uffe2\006\uffe2\011\uffe2\016" +
    "\uffe2\022\uffe2\023\uffe2\030\uffe2\046\uffe2\047\uffe2\053\uffe2" +
    "\057\uffe2\063\uffe2\001\002\000\006\026\uffe8\027\111\001" +
    "\002\000\004\026\106\001\002\000\016\027\065\032\066" +
    "\033\063\037\064\045\034\054\070\001\002\000\006\013" +
    "\100\045\110\001\002\000\012\013\uffd1\045\uffd1\050\uffd1" +
    "\051\uffd1\001\002\000\004\050\112\001\002\000\012\013" +
    "\uffd2\045\uffd2\050\uffd2\051\uffd2\001\002\000\006\013\100" +
    "\050\114\001\002\000\012\013\uffcc\045\uffcc\050\uffcc\051" +
    "\uffcc\001\002\000\032\005\uffdc\006\uffdc\011\uffdc\016\uffdc" +
    "\022\uffdc\023\uffdc\030\uffdc\046\uffdc\047\uffdc\053\uffdc\057" +
    "\uffdc\063\uffdc\001\002\000\014\027\065\032\066\033\063" +
    "\037\064\054\070\001\002\000\006\013\100\051\120\001" +
    "\002\000\032\005\uffe4\006\uffe4\011\uffe4\016\uffe4\022\uffe4" +
    "\023\uffe4\030\uffe4\046\uffe4\047\uffe4\053\uffe4\057\uffe4\063" +
    "\uffe4\001\002\000\006\004\123\051\122\001\002\000\032" +
    "\005\uffd8\006\uffd8\011\uffd8\016\uffd8\022\uffd8\023\uffd8\030" +
    "\uffd8\046\uffd8\047\uffd8\053\uffd8\057\uffd8\063\uffd8\001\002" +
    "\000\014\027\065\032\066\033\063\037\064\054\070\001" +
    "\002\000\006\013\100\051\125\001\002\000\032\005\uffd9" +
    "\006\uffd9\011\uffd9\016\uffd9\022\uffd9\023\uffd9\030\uffd9\046" +
    "\uffd9\047\uffd9\053\uffd9\057\uffd9\063\uffd9\001\002\000\014" +
    "\027\065\032\066\033\063\037\064\054\070\001\002\000" +
    "\006\013\100\050\130\001\002\000\026\005\015\006\057" +
    "\011\055\022\051\023\012\030\046\047\056\053\020\057" +
    "\045\063\021\001\002\000\032\005\uffe0\006\uffe0\011\uffe0" +
    "\016\132\022\uffe0\023\uffe0\030\uffe0\046\uffe0\047\uffe0\053" +
    "\uffe0\057\uffe0\063\uffe0\001\002\000\026\005\015\006\057" +
    "\011\055\022\051\023\012\030\046\047\056\053\020\057" +
    "\045\063\021\001\002\000\032\005\uffdf\006\uffdf\011\uffdf" +
    "\016\uffdf\022\uffdf\023\uffdf\030\uffdf\046\uffdf\047\uffdf\053" +
    "\uffdf\057\uffdf\063\uffdf\001\002\000\030\005\uffe5\006\uffe5" +
    "\011\uffe5\022\uffe5\023\uffe5\030\uffe5\046\uffe5\047\uffe5\053" +
    "\uffe5\057\uffe5\063\uffe5\001\002\000\020\005\uffee\023\uffee" +
    "\046\uffee\052\uffee\053\uffee\056\uffee\063\uffee\001\002\000" +
    "\030\005\015\006\057\011\055\022\051\023\012\030\046" +
    "\046\140\047\056\053\020\057\045\063\021\001\002\000" +
    "\032\005\uffda\006\uffda\011\uffda\016\uffda\022\uffda\023\uffda" +
    "\030\uffda\046\uffda\047\uffda\053\uffda\057\uffda\063\uffda\001" +
    "\002\000\032\005\uffdb\006\uffdb\011\uffdb\016\uffdb\022\uffdb" +
    "\023\uffdb\030\uffdb\046\uffdb\047\uffdb\053\uffdb\057\uffdb\063" +
    "\uffdb\001\002\000\014\027\065\032\066\033\063\037\064" +
    "\054\070\001\002\000\006\013\100\050\143\001\002\000" +
    "\026\005\015\006\057\011\055\022\051\023\012\030\046" +
    "\047\056\053\020\057\045\063\021\001\002\000\032\005" +
    "\uffde\006\uffde\011\uffde\016\uffde\022\uffde\023\uffde\030\uffde" +
    "\046\uffde\047\uffde\053\uffde\057\uffde\063\uffde\001\002\000" +
    "\006\026\027\062\146\001\002\000\006\010\uffec\050\uffec" +
    "\001\002\000\020\005\ufff1\023\ufff1\046\ufff1\052\ufff1\053" +
    "\ufff1\056\ufff1\063\ufff1\001\002\000\006\010\uffed\050\uffed" +
    "\001\002\000\020\005\ufff9\023\ufff9\046\ufff9\052\ufff9\053" +
    "\ufff9\056\ufff9\063\ufff9\001\002\000\006\002\ufffe\007\ufffe" +
    "\001\002\000\020\005\ufff3\023\ufff3\046\ufff3\052\ufff3\053" +
    "\ufff3\056\ufff3\063\ufff3\001\002\000\004\027\035\001\002" +
    "\000\006\026\027\062\154\001\002\000\020\005\ufff7\023" +
    "\ufff7\046\ufff7\052\ufff7\053\ufff7\056\ufff7\063\ufff7\001\002" +
    "\000\004\030\160\001\002\000\020\005\015\023\012\046" +
    "\162\052\013\053\020\056\017\063\021\001\002\000\020" +
    "\005\015\023\012\046\163\052\013\053\020\056\017\063" +
    "\021\001\002\000\006\002\ufffb\007\ufffb\001\002\000\006" +
    "\002\ufffd\007\ufffd\001\002\000\006\002\uffff\007\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\003\003\004\001\001\000\004\003" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\021\005\013\006" +
    "\015\012\023\001\001\000\002\001\001\000\006\006\155" +
    "\012\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\150\006\015\012\023\001" +
    "\001\000\002\001\001\000\006\007\024\025\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\037\012\035\001" +
    "\001\000\002\001\001\000\004\010\146\001\001\000\002" +
    "\001\001\000\004\012\144\001\001\000\004\010\043\001" +
    "\001\000\014\012\052\013\046\015\057\020\053\024\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\052\013\046\015\057\020\053\024\135\001\001\000\002" +
    "\001\001\000\012\012\052\013\133\015\057\020\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\071\015" +
    "\074\020\072\022\073\023\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\112\015\074" +
    "\020\072\022\073\023\070\001\001\000\004\012\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\076\001\001\000\002\001\001\000\014\014" +
    "\075\015\074\020\072\022\073\023\070\001\001\000\002" +
    "\001\001\000\004\021\076\001\001\000\014\014\101\015" +
    "\074\020\072\022\073\023\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\106" +
    "\015\074\020\072\022\073\023\070\001\001\000\004\021" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\116\015\074\020\072\022\073" +
    "\023\070\001\001\000\004\021\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\123" +
    "\015\074\020\072\022\073\023\070\001\001\000\004\021" +
    "\076\001\001\000\002\001\001\000\014\014\126\015\074" +
    "\020\072\022\073\023\070\001\001\000\004\021\076\001" +
    "\001\000\012\012\052\013\130\015\057\020\053\001\001" +
    "\000\002\001\001\000\012\012\052\013\132\015\057\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\052\013\133\015\057\020\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\141" +
    "\015\074\020\072\022\073\023\070\001\001\000\004\021" +
    "\076\001\001\000\012\012\052\013\143\015\057\020\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\160\005\013\006\015\012\023\001\001\000" +
    "\010\005\150\006\015\012\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		System.out.println("Line " + this.getLine()+": Syntax error; unexpected " + s);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= LP expr RP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= literal 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= unop expr 
            {
              Expr RESULT =null;
		int uopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnaryOp uop = (UnaryOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(parser.getLine(), exp, uop); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr binop expr 
            {
              Expr RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr exp1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOp bop = (BinaryOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr exp2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpExpr(parser.getLine(), exp1, exp2, bop); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr DOT LENGTH 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length(parser.getLine(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NEW type LB expr RB 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sizeOfArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeOfArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr sizeOfArray = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(parser.getLine(), t, sizeOfArray); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NEW CLASS_ID LP RP 
            {
              Expr RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClassInstance(parser.getLine(), cid);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= THIS 
            {
              Expr RESULT =null;
		 RESULT = new This(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= call 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= location 
            {
              Expr RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = loc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unop ::= LNEG 
            {
              UnaryOp RESULT =null;
		 RESULT = new UnaryOp(parser.getLine(),Operator.LNEG); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unop ::= MINUS 
            {
              UnaryOp RESULT =null;
		 RESULT = new UnaryOp(parser.getLine(),Operator.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= type ID SEMI 
            {
              Stmt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclStmt(parser.getLine(), t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= type ID ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclStmt(parser.getLine(), t, id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= LCBR RCBR 
            {
              Stmt RESULT =null;
		 RESULT = new BlockOfStmts(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= LCBR stmtList RCBR 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockOfStmts(parser.getLine(), sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= CONTINUE SEMI 
            {
              Stmt RESULT =null;
		  RESULT = new ContinueStmt(parser.getLine());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= BREAK SEMI 
            {
              Stmt RESULT =null;
		  RESULT = new BreakStmt(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= WHILE LP expr RP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStmt(parser.getLine(), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int else_sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int else_sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt else_s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(parser.getLine(), e, s, else_s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LP expr RP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(parser.getLine(), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ReturnStmt(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(parser.getLine(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= call SEMI 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStmt(parser.getLine(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= location ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStmt(parser.getLine(), l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtList ::= stmtList stmt 
            {
              StmtList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.addStmt(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtList ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Stmt> slist = new ArrayList<Stmt>(); slist.add(s);
		RESULT = new StmtList(parser.getLine(), slist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ArrayType(parser.getLine(),t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ClassType(parser.getLine(),cid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StrType(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BoolType(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalsList COMMA type ID 
            {
              FormalsList RESULT =null;
		int fslleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fslright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		FormalsList fsl = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fsl.addFormal(t, id); RESULT = fsl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalsList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalsList ::= type ID 
            {
              FormalsList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FormalsList(parser.getLine(),t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalsList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methodBody ::= LCBR stmtList RCBR 
            {
              MethodBody RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MethodBody(parser.getLine(),sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methodBody ::= LCBR RCBR 
            {
              MethodBody RESULT =null;
		 RESULT = new MethodBody(parser.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodSignature ::= ID LP formalsList RP methodBody 
            {
              MethodSignature RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalsList fs = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodBody mb = (MethodBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodSignature(parser.getLine(),id, mb, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodSignature",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodSignature ::= ID LP RP methodBody 
            {
              MethodSignature RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodBody mb = (MethodBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodSignature(parser.getLine(),id, mb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodSignature",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDeclration ::= type methodSignature 
            {
              MethodDeclration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodSignature ms = (MethodSignature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodDeclration(parser.getLine(),ms, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDeclration ::= VOID methodSignature 
            {
              MethodDeclration RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodSignature ms = (MethodSignature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodDeclration(parser.getLine(),ms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList idl = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idl.addId(id); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifierList ::= ID 
            {
              IdentifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierList(parser.getLine(),id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldOrMethod ::= methodDeclration 
            {
              FieldOrMethod RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDeclration md = (MethodDeclration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Method(parser.getLine(),md, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldOrMethod",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldOrMethod ::= STATIC methodDeclration 
            {
              FieldOrMethod RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDeclration md = (MethodDeclration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Method(parser.getLine(),md, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldOrMethod",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldOrMethod ::= type identifierList SEMI 
            {
              FieldOrMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierList idlist = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Field(parser.getLine(),t, idlist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldOrMethod",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldsAndMethodsList ::= fieldsAndMethodsList fieldOrMethod 
            {
              FieldsAndMethodsList RESULT =null;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldsAndMethodsList fml = (FieldsAndMethodsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldOrMethod fom = (FieldOrMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fml.addFieldOrMethod(fom); RESULT = fml; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsAndMethodsList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldsAndMethodsList ::= fieldOrMethod 
            {
              FieldsAndMethodsList RESULT =null;
		int fomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldOrMethod fom = (FieldOrMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldsAndMethodsList(parser.getLine(),fom); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsAndMethodsList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR RCBR 
            {
              ClassDecl RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ifidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ifid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ClassDecl(parser.getLine(),cid, ifid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS CLASS_ID LCBR RCBR 
            {
              ClassDecl RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ClassDecl(parser.getLine(),cid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldsAndMethodsList RCBR 
            {
              ClassDecl RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ifidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ifidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ifid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldsAndMethodsList fml = (FieldsAndMethodsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(parser.getLine(),cid, fml, ifid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl ::= CLASS CLASS_ID LCBR fieldsAndMethodsList RCBR 
            {
              ClassDecl RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldsAndMethodsList fml = (FieldsAndMethodsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(parser.getLine(),cid, fml); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program classDecl 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.addClassDecl(cd); RESULT=p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classDecl 
            {
              Program RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Program(parser.getLine(), cd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

