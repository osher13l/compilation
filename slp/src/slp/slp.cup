package slp;

import java_cup.runtime.*;
import java.util.*;
import java.util.ArrayList;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		System.out.println("Line " + this.getLine()+": Syntax error; unexpected " + s);
	}
:}


  
/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal COMMA;
terminal CONTINUE;
terminal DIVIDE;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GTE;
terminal IF;
terminal INT;
terminal INTEGER;
terminal LAND;
terminal LB;
terminal LP;
terminal LCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MINUS;
terminal MOD;
terminal MULTIPLY;
terminal NEQUAL;
terminal NULL;
terminal PLUS;
terminal RB;
terminal RCBR;
terminal RETURN;
terminal RP;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;
terminal UMINUS;


/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal Integer	NUMBER;
terminal String		ID;
terminal String		CLASS_ID;
terminal String		QUOTE;
/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program program;
non terminal ClassDecl classDecl;
non terminal FieldsAndMethodsList fieldsAndMethodsList;
non terminal FieldOrMethod fieldOrMethod;
non terminal MethodDeclration methodDeclration;
non terminal MethodSignature methodSignature;
non terminal MethodBody methodBody;
non terminal FormalsList formalsList;
non terminal Type type;
non terminal Stmt stmt;
non terminal Expr expr;
non terminal Call call;
non terminal StaticCall staticCall;
non terminal VirtualCall virtualCall;
non terminal Location location;
non terminal BinaryOp binop;
non terminal UnaryOp unop;
non terminal Literal literal;
non terminal StmtList stmtList;
non terminal IdentifierList identifierList;
non terminal List<Expr> exprList;


/**************/
/* PRECEDENCE */
/**************/
precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GT, LT, GTE, LTE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left DOT, LP, LB;
precedence left IF,ELSE;


/* ============= */
/* cutting rules */
/* ============= */
program ::= classDecl:cd
	{: RESULT=new Program(cdleft+1, cd); :}
	| program:p classDecl:cd
	{: p.addClassDecl(cd); RESULT=p;:}
;

classDecl ::= CLASS CLASS_ID:cid LCBR fieldsAndMethodsList:fml RCBR
	{: RESULT = new ClassDecl(cidleft+1,cid, fml); :}
	| CLASS CLASS_ID:cid EXTENDS CLASS_ID:ifid LCBR fieldsAndMethodsList:fml RCBR
	{: RESULT = new ClassDecl(cidleft+1,cid, fml, ifid); :}
	| CLASS CLASS_ID:cid LCBR RCBR
	{: RESULT = new ClassDecl(cidleft+1,cid); :}
	| CLASS CLASS_ID:cid EXTENDS CLASS_ID:ifid LCBR RCBR
	{: RESULT = new ClassDecl(cidleft+1,cid, ifid); :}
;

fieldsAndMethodsList ::= fieldOrMethod:fom
	{: RESULT = new FieldsAndMethodsList(fomleft+1,fom); :}
	| fieldsAndMethodsList:fml fieldOrMethod:fom
	{: fml.addFieldOrMethod(fom); RESULT = fml; :}
;

fieldOrMethod ::= type:t identifierList:idlist SEMI
	{: RESULT = new Field(tleft+1,t, idlist); :}
	| STATIC methodDeclration:md
	{: RESULT = new Method(mdleft+1,md, true); :}
	| methodDeclration:md
	{: RESULT = new Method(mdleft+1,md, false); :}
;

identifierList ::= ID:id
	{: RESULT = new IdentifierList(idleft+1,id); :}
	| identifierList:idl COMMA ID:id
	{: idl.addId(id); RESULT = idl; :}
;

methodDeclration ::= VOID methodSignature:ms
	{: RESULT = new MethodDeclration(msleft+1,ms); :}
	| type:t methodSignature:ms
	{: RESULT = new MethodDeclration(msleft+1,ms, t); :}
;

methodSignature ::= ID:id LP RP methodBody:mb
	{: RESULT = new MethodSignature(idleft+1,id, mb); :}
	| ID:id LP formalsList:fs RP methodBody:mb
	{: RESULT = new MethodSignature(idleft+1,id, mb, fs); :}
;

methodBody ::= LCBR RCBR
	{: RESULT = new MethodBody(parser.getLine()); :}
	| LCBR stmtList:sl RCBR
	{: RESULT = new MethodBody(slleft+1,sl); :}
;

formalsList ::= type:t ID:id
	{: RESULT = new FormalsList(tleft+1,t, id); :}
	| formalsList:fsl COMMA type:t ID:id
	{: fsl.addFormal(t, id); RESULT = fsl; :}
;

type ::= INT
	{: RESULT = new IntType(parser.getLine()); :}
	| BOOLEAN
	{: RESULT = new BoolType(parser.getLine()); :}
	| STRING
	{: RESULT = new StrType(parser.getLine()); :}
	| CLASS_ID:cid
	{: RESULT = new ClassType(cidleft+1,cid); :}
	| type:t LB RB
	{: RESULT = new ArrayType(tleft+1,t); :}
;



stmtList ::= stmt:s
	{: List<Stmt> slist = new ArrayList<Stmt>(); slist.add(s);
		RESULT = new StmtList(sleft+1, slist); :}
	| stmtList:sl stmt:s
	{: sl.addStmt(s); RESULT = sl; :}
;

stmt ::= location:l ASSIGN expr:e SEMI
	{: RESULT = new AssignStmt(lleft+1, l, e); :}
	
   	| call:c SEMI
	{: RESULT = new CallStmt(cleft+1, c); :}     
	| RETURN expr:e SEMI 
	{: RESULT = new ReturnStmt(eleft+1, e); :}
	| RETURN SEMI 
	{: RESULT = new ReturnStmt(parser.getLine()); :}
	
	| IF LP expr:e RP stmt:s
	{: RESULT = new IfStmt(eleft+1, e, s); :}
	| IF LP expr:e RP stmt:s ELSE stmt:else_s
	{: RESULT = new IfStmt(eleft+1, e, s, else_s); :}
	
	| WHILE LP expr:e RP stmt:s
	{: RESULT = new WhileStmt(eleft+1, e, s); :} 
	    
	| BREAK SEMI
	{:  RESULT = new BreakStmt(parser.getLine()); :}
	
	| CONTINUE SEMI
	{:  RESULT = new ContinueStmt(parser.getLine());:}
	
	| LCBR stmtList:sl RCBR
	{: RESULT = new BlockOfStmts(slleft+1, sl); :}
	| LCBR RCBR        
	{: RESULT = new BlockOfStmts(parser.getLine()); :}
	

	| type:t ID:id ASSIGN expr:e SEMI
	{: RESULT = new VarDeclStmt(idleft+1, t, id, e); :}
    	| type:t ID:id SEMI
    {: RESULT = new VarDeclStmt(idleft+1, t, id); :}
;





expr ::= location:loc
	{: RESULT = loc; :}
	| call:c
	
	{: RESULT = c; :}   
	| THIS
	
	{: RESULT = new This(parser.getLine()); :}
	| NEW CLASS_ID:cid LP RP
	
	{: RESULT = new NewClassInstance(cidleft+1, cid);:}
	
	| NEW type:t LB expr:sizeOfArray RB
	{: RESULT = new NewArray(tleft+1, t, sizeOfArray); :}
	
	| expr:e DOT LENGTH
	{: RESULT = new Length(eleft+1, e); :}
	
	| expr:exp1 binop:bop expr:exp2
	{: RESULT = new BinaryOpExpr(exp1left+1, exp1, exp2, bop); :}
	
	| unop:uop expr:exp
	{: RESULT = new UnaryOpExpr(uopleft+1, exp, uop); :} %prec UMINUS 
	
	| literal:l
	{: RESULT = l; :}
	
	| LP expr:e RP
	{: RESULT = e; :}
;   


exprList ::= expr:e
	{: List<Expr> elist = new ArrayList<Expr>(); elist.add(e); 	RESULT = elist; :}
	| exprList:elist COMMA expr:e
	{: elist.add(e); RESULT = elist; :}
;

call ::= staticCall:sc
         {: RESULT = sc; :}
       | virtualCall:vc
         {: RESULT = vc; :}
;

staticCall ::= 	  CLASS_ID:cid DOT ID:id LP RP
				  {: RESULT = new StaticCall(cidleft+1, cid, id); :}
				| CLASS_ID:cid DOT ID:id LP exprList:elist RP
				  {: RESULT = new StaticCall(cidleft+1, cid, id, elist); :} 
;

virtualCall ::= ID:id LP RP
				  {: RESULT = new VirtualCall(idleft+1, id); :}
				| ID:id LP exprList:elist RP
				  {: RESULT = new VirtualCall(idleft+1, id, elist); :}
				| expr:e DOT ID:id LP exprList:elist RP
				  {: RESULT = new VirtualCall(idleft+1, e, id, elist); :} 
			  	| expr:e DOT ID:id LP RP
				  {: RESULT = new VirtualCall(idleft+1, e, id); :} 
;

location ::= ID:id
			{: RESULT = new LocationVar(idleft+1, id); :}
			| expr:e DOT ID:id
			{: RESULT = new LocationMember(idleft+1, id, e); :}
			| expr:e1 LB expr:e2 RB
			{: RESULT = new LocationAry(e1left+1, e1, e2); :}
;

binop ::= PLUS
		{: RESULT = new BinaryOp(parser.getLine(),Operator.PLUS, true); :}
		| MINUS
		{: RESULT = new BinaryOp(parser.getLine(),Operator.MINUS, true); :}
		| MULTIPLY
		{: RESULT = new BinaryOp(parser.getLine(),Operator.MULTIPLY, true); :}
		| DIVIDE
		{: RESULT = new BinaryOp(parser.getLine(),Operator.DIVIDE, true); :}
		| MOD
		{: RESULT = new BinaryOp(parser.getLine(),Operator.MOD, true); :}
		| LAND
		{: RESULT = new BinaryOp(parser.getLine(),Operator.LAND, false); :}
		| LOR
		{: RESULT = new BinaryOp(parser.getLine(),Operator.LOR, false); :}
		| LT
		{: RESULT = new BinaryOp(parser.getLine(),Operator.LT, false); :}
		| GT
		{: RESULT = new BinaryOp(parser.getLine(),Operator.GT, false); :}
		| LTE
		{: RESULT = new BinaryOp(parser.getLine(),Operator.LTE, false); :}
		|  GTE
		{: RESULT = new BinaryOp(parser.getLine(),Operator.GTE, false); :}
		| EQUAL
		{: RESULT = new BinaryOp(parser.getLine(),Operator.EQUAL, false); :}
		| NEQUAL
		{: RESULT = new BinaryOp(parser.getLine(),Operator.NEQUAL, false); :}
		
;

unop ::= MINUS 
   	{: RESULT = new UnaryOp(parser.getLine(),Operator.MINUS); :} %prec UMINUS 
    | LNEG  
    {: RESULT = new UnaryOp(parser.getLine(),Operator.LNEG); :} 
;

literal ::=  NUMBER:n
			{: RESULT = new LiteralInteger(nleft+1, n); :}
			| QUOTE:s
			{: RESULT = new LiteralString(sleft+1, s); :}
			| TRUE
			{: RESULT = new LiteralTrue(parser.getLine()); :}
			| FALSE
			{: RESULT = new LiteralFalse(parser.getLine()); :}
			| NULL
			{: RESULT = new LiteralNull(parser.getLine()); :}
;	



