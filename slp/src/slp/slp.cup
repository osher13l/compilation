package slp;

import java_cup.runtime.*;
import java.util.*;
import java.util.ArrayList;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		System.out.println("Line " + this.getLine()+": Syntax error; unexpected " + s);
	}
:}


  
/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal COMMA;
terminal CONTINUE;
terminal DIVIDE;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GTE;
terminal IF;
terminal INT;
terminal INTEGER;
terminal LAND;
terminal LB;
terminal LP;
terminal LCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MINUS;
terminal MOD;
terminal MULTIPLY;
terminal NEQUAL;
terminal NULL;
terminal PLUS;
terminal RB;
terminal RCBR;
terminal RETURN;
terminal RP;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;
terminal UMINUS;


/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal Integer	NUMBER;
terminal String		ID;
terminal String		CLASS_ID;
terminal String		QUOTE;
/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program program;
non terminal ClassDecl classDecl;
non terminal FieldsAndMethodsList fieldsAndMethodsList;
non terminal FieldOrMethod fieldOrMethod;
non terminal MethodDeclration methodDeclration;
non terminal MethodSignature methodSignature;
non terminal MethodBody methodBody;
non terminal FormalsList formalsList;
non terminal Type type;
non terminal Stmt stmt;
non terminal Expr expr;
non terminal Call call;
non terminal StaticCall staticCall;
non terminal VirtualCall virtualCall;
non terminal Location location;
non terminal BinaryOp binop;
non terminal UnaryOp unop;
non terminal Literal literal;
non terminal StmtList stmtList;
non terminal identifierList identifierList;

/**************/
/* PRECEDENCE */
/**************/
precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GT, LT, GTE, LTE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left DOT, LP, LB;
precedence left IF,ELSE;


/* ============= */
/* cutting rules */
/* ============= */
program ::= classDecl:cd
	{: RESULT=new Program(parser.getLine(), cd); :}
	| program:p classDecl:cd
	{: p.addClassDecl(cd); RESULT=p;:}
;

classDecl ::= CLASS CLASS_ID:cid LCBR fieldsAndMethodsList:fml RCBR
	{: RESULT = new ClassDecl(parser.getLine(),cid, fml); :}
	| CLASS CLASS_ID:cid EXTENDS CLASS_ID:ifid LCBR fieldsAndMethodsList:fml RCBR
	{: RESULT = new ClassDecl(parser.getLine(),cid, fml, ifid); :}
	| CLASS CLASS_ID:cid LCBR RCBR
	{: RESULT = new ClassDecl(parser.getLine(),cid); :}
	| CLASS CLASS_ID:cid EXTENDS CLASS_ID:ifid LCBR RCBR
	{: RESULT = new ClassDecl(parser.getLine(),cid, ifid); :}
;

fieldsAndMethodsList ::= fieldOrMethod:fom
	{: RESULT = new FieldsAndMethodsList(parser.getLine(),fom); :}
	| fieldsAndMethodsList:fml fieldOrMethod:fom
	{: fml.addFieldOrMethod(parser.getLine(),fom); RESULT = fml; :}
;

fieldOrMethod ::= type:t identifierList:idlist SEMI
	{: RESULT = new Field(parser.getLine(),t, idlist); :}
	| STATIC methodDeclration:md
	{: RESULT = new Method(parser.getLine(),md, true); :}
	| methodDeclration:md
	{: RESULT = new Method(parser.getLine(),md, false); :}
;

identifierList ::= ID:id
	{: RESULT = new identifierList(parser.getLine(),id); :}
	| identifierList:idlist COMMA ID:id
	{: idlist.addId(id); RESULT = idl; :}
;

methodDeclration ::= VOID methodSignature:ms
	{: RESULT = new MethodDeclration(parser.getLine(),ms); :}
	| type:t methodSignature:ms
	{: RESULT = new MethodDeclration(parser.getLine(),ms, t); :}
;

methodSignature ::= ID:id LP RP methodBody:mb
	{: RESULT = new MethodSignature(parser.getLine(),id, mc); :}
	| ID:id LP formalsList:fs RP methodBody:mb
	{: RESULT = new MethodSignature(parser.getLine(),id, mc, fs); :}
;

methodBody ::= LCBR RCBR
	{: RESULT = new MethodBody(parser.getLine()); :}
	| LCBR stmtList:sl RCBR
	{: RESULT = new MethodBody(parser.getLine(),sl); :}
;

formalsList ::= type:t ID:id
	{: RESULT = new FormalsList(parser.getLine(),t, id); :}
	| formalsList:fsl COMMA type:t ID:id
	{: fsl.addFormal(t, id); RESULT = fsl; :}
;

type ::= INT
	{: RESULT = new IntType(parser.getLine()); :}
	| BOOLEAN
	{: RESULT = new BoolType(parser.getLine()); :}
	| STRING
	{: RESULT = new StrType(parser.getLine()); :}
	| CLASS_ID:cid
	{: RESULT = new ClassType(parser.getLine(),cid); :}
	| type:t LB RB
	{: RESULT = new ArrayType(parser.getLine(),t); :}
;



stmtList ::= stmt:s
	{: List<Stmt> sl = new ArrayList<Stmt>(); sl.add(s);
		RESULT = new StmtList(parser.getLine(), sl); :}
	| stmtList:sl stmt:s
	{: sl.addStmt(s); RESULT = sl; :}
;

stmt ::= location:l ASSIGN expr:e SEMI
	{: RESULT = new AssignStmt(parser.getLine(), l, e); :}
	
   	| call:c SEMI
	{: RESULT = new CallStmt(parser.getLine(), c); :}     
	| RETURN expr:e SEMI 
	{: RESULT = new ReturnStmt(parser.getLine(), e); :}
	| RETURN SEMI 
	{: RESULT = new ReturnStmt(parser.getLine()); :}
	
	| IF LP expr:e RP stmt:s
	{: RESULT = new IfStmt(parser.getLine(), e, s); :}
	| IF LP expr:e RP stmt:s ELSE stmt:else_s
	{: RESULT = new IfStmt(parser.getLine(), e, s, else_s); :}
	
	| WHILE LP expr:e RP stmt:s
	{: RESULT = new WhileStmt(parser.getLine(), e, s); :} 
	    
	| BREAK SEMI
	{:  RESULT = new BreakStmt(parser.getLine()); :}
	
	| CONTINUE SEMI
	{:  RESULT = new ContinueStmt(parser.getLine());:}
	
	| LCBR stmtList:sl RCBR
	{: RESULT = new StmtList(parser.getLine(), sl); :}
	| LCBR RCBR        
	{: RESULT = new StmtList(parser.getLine()); :}
	
	| type:t ID:id ASSIGN expr:e SEMI
	{: RESULT = new VarDeclStmt(parser.getLine(), t, id, e); :}
    	| type:t ID:id SEMI
    {: RESULT = new VarDeclStmt(parser.getLine(), t, id); :}
;

/* oren's code */
expr ::= expr:e1 PLUS:p expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.PLUS);
		   System.out.println("Reduced rule e1 + e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 MINUS expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MINUS);
		   System.out.println("Reduced rule e1 - e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 MULTIPLY expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MULTIPLY);
		   System.out.println("Reduced rule e1 * e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 DIVIDE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.DIVIDE);
		   System.out.println("Reduced rule e1 / e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LAND expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LAND);
		   System.out.println("Reduced rule e1 && e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LOR expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LOR);
		   System.out.println("Reduced rule e1 || e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LT);
		   System.out.println("Reduced rule e1 < e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 GT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GT);
		   System.out.println("Reduced rule e1 > e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LTE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LTE);
		   System.out.println("Reduced rule e1 <= e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 GTE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GTE);
		   System.out.println("Reduced rule e1 >= e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| MINUS expr:e1
		{: RESULT = new UnaryOpExpr(e1, Operator.MINUS); :} %prec UMINUS
		| LP expr:e RP
		{: RESULT = e; :}
		| NUMBER:n
		{: RESULT = new NumberExpr(n.intValue()); :}
		| ID:v
		{: RESULT = new VarExpr(v); :}
;
/* end of orens code */